{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "(dev) App ",
            "request": "launch",
            "type": "dart",
            // "flutterMode": "debug",
            "program": "./lib/main.dart",
            // flutter run --enable-impeller
            "args": [
                // "--profile"
                // "--enable-impeller"
                // "--flavor",
                // "dev",
                // "--no-sound-null-safety"
            ]
        },
        {
            "name": "(profile) App ",
            "request": "launch",
            "type": "dart",
            // "flutterMode": "debug",
            "program": "./lib/main.dart",
            // flutter run --enable-impeller
            "args": [
                "--profile",
                "--cache-sksl",
                "--purge-persistent-cache"
                // "--enable-impeller"
                // "--flavor",
                // "dev",
                // "--no-sound-null-safety"
            ]
        },
        {
            "name": "(release) App ",
            "request": "launch",
            "type": "dart",
            // "flutterMode": "debug",
            "program": "./lib/main.dart",
            // flutter run --enable-impeller
            "args": [
                "--release"
                // "--enable-impeller"
                // "--flavor",
                // "dev",
                // "--no-sound-null-safety"
            ]
        },
        {
            "name": "(dev) [DEMO] App",
            "request": "launch",
            "type": "dart",
            // "flutterMode": "debug",
            "program": "./lib/main_demo.dart",
            "args": [
                // "--profile"
                // "--enable-impeller"
                // "--flavor",
                // "dev",
                // "--no-sound-null-safety"
            ]
        },
        // {
        //     "name": "App (release)",
        //     "request": "launch",
        //     "type": "dart",
        //     // "flutterMode": "profile",
        //    // "flutterMode": "release",
        //     "program": "./lib/main.dart",
        //     "args": [
        //         // "--flavor",
        //         //  "dev",
        //         //  "--no-sound-null-safety"
        //         "--release"
        //     ]
        // },
        {
            // This task builds the Rust and Dart code of AppFlowy.
            "name": "AF-desktop: Build All",
            "request": "launch",
            "program": "./lib/main.dart",
            "type": "dart",
            "preLaunchTask": "AF: Build ServiceBook Core",
            "env": {
                "RUST_LOG": "trace",
                // "RUST_LOG": "debug"
            },
        },
        {
            //  This task only builds the Dart code of AppFlowy.
            "name": "AF-desktop: Build Dart Only",
            "request": "launch",
            "program": "./lib/main.dart",
            "type": "dart",
            "env": {
                "RUST_LOG": "debug"
            },
        },
        {
            // This task builds will:
            // - call the clean task,
            // - rebuild all the generated Files (including freeze and language files)
            // - rebuild the the Rust and Dart code of AppFlowy.
            "name": "AF-desktop: Clean + Rebuild All",
            "request": "launch",
            "program": "./lib/main.dart",
            "type": "dart",
            "preLaunchTask": "AF: Clean + Rebuild All",
            "env": {
                "RUST_LOG": "trace"
            },
        },
        {
            "name": "AF-desktop: Debug Rust",
            "request": "attach",
            "type": "lldb",
            "pid": "${command:pickMyProcess}"
        },
        // {
        //     "name": "AF-desktop: profile mode",
        //     "request": "launch",
        //     "program": "./lib/main.dart",
        //     "type": "dart",
        //     "flutterMode": "profile",
        //     "cwd": "${workspaceRoot}/appflowy_flutter"
        // },
        {
            // This task builds the Rust and Dart code of AppFlowy for android.
            "name": "AF-android: Build All",
            "request": "launch",
            "program": "./lib/main.dart",
            "type": "dart",
            "preLaunchTask": "AF: build_mobile_sdk",
            "env": {
                "RUST_LOG": "info"
            },
        },
        {
            // This task builds will:
            // - call the clean task,
            // - rebuild all the generated Files (including freeze and language files)
            // - rebuild the the Rust and Dart code of AppFlowy.
            "name": "AF-android: Clean + Rebuild All",
            "request": "launch",
            "program": "./lib/main.dart",
            "type": "dart",
            "preLaunchTask": "AF: Clean + Rebuild All (Android)",
            "env": {
                "RUST_LOG": "info"
            },
        },
        { // Profile launch config so that I can profile flutter mobile apps
            "name": "Flutter-Profile",
            "type": "dart",
            "request": "launch",
            "program": "lib/main.dart",
            "flutterMode": "profile"
        },
        { // Debug launch config so that I can debug an app
            "name": "Flutter-Debug",
            "request": "launch",
            "type": "dart",
            "program": "lib/main.dart",
            "flutterMode": "debug"
        },
        // per: https://pub.dev/documentation/golden_toolkit/latest/#configure-vs-code
        { // Golden launch config so that I can update goldens after I change UI code
            "name": "Golden",
            "request": "launch",
            "type": "dart",
            "codeLens": {
                "for": [
                    "run-test",
                    "run-test-file"
                ]
            },
            "args": [
                "--update-goldens"
            ]
        },
        // Release launch config so that I can run a released app on a device
        {
            "name": "Flutter-Release",
            "request": "launch",
            "type": "dart",
            "program": "lib/main.dart",
            "flutterMode": "release"
        },
        // Integration Test launch config so that I can launch the  app to drive the integration tests on
        {
            "name": "Integration Tests: Launch App",
            "request": "launch",
            "type": "dart",
            "program": "lib/main.dart",
            "flutterMode": "debug"
        },
        // for emulators per: https://www.reddit.com/r/FlutterDev/comments/8j8w5t/how_do_i_make_vs_code_automatically_open_an/
        // stops the rendering white box error when launching emulators
        {
            "name": "Flutter",
            "request": "launch",
            "type": "dart",
            "args": [
                "--enable-software-rendering"
            ]
        }
    ]
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    //  per dart-flutter extensions directions at: https://dartcode.org/docs/launch-configuration/
    //
    // although one can, NEVER EVER put any define args in these launch configs as it's 
    // too easy to by mistake include private keys and have them end up in the 
    // git repo.
    //
    // Since build variants require the -t target-main-dart.dart 
    // they go as separate launch config settings here
    //
    // 
    // Remember deviceID only works for connected running devices or emulators(simulators)
    // To launch non running emulators(simulators) one uses a task as than it will expose that 
    // in the command pallete
    //
    // For running connected devices its deviceID in the config and 
    //   "compounds": [{
    //      "name": "All Devices",
    //      "configurations": ["Run Dev Android", "Run Dev Iphone"],
    //     
    //  }]
}